<chapter id="variables">
  <title>変数</title>
  
  <para>プロセス変数には、<literal>ExecutionService</literal>のメソッドを使用して、プロセスの外部からアクセスすることができます。
  </para>
  
  <itemizedlist>
    <listitem><literal>ProcessInstance startProcessInstanceById(String processDefinitionId, Map&lt;String, Object&gt; variables);</literal></listitem>
    <listitem><literal>ProcessInstance startProcessInstanceById(String processDefinitionId, Map&lt;String, Object&gt; variables, String processInstanceKey);</literal></listitem>
    <listitem><literal>ProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map&lt;String, ?&gt; variables);</literal></listitem>
    <listitem><literal>ProcessInstance startProcessInstanceByKey(String processDefinitionKey, Map&lt;String, ?&gt; variables, String processInstanceKey);</literal></listitem>
    <listitem><literal>void setVariable(String executionId, String name, Object value);</literal></listitem>
    <listitem><literal>void setVariables(String executionId, Map&lt;String, ?&gt; variables);</literal></listitem>
    <listitem><literal>Object getVariable(String executionId, String variableName);</literal></listitem>
    <listitem><literal>Set&lt;String&gt; getVariableNames(String executionId);</literal></listitem>
    <listitem><literal>Map&lt;String, Object&gt; getVariables(String executionId, Set&lt;String&gt; variableNames);</literal></listitem>
  </itemizedlist>
  
  <para>プロセスの内部からアクセスする場合は、
  <literal>ActivityExecution</literal>や<literal>EventListenerExecution</literal>のようなExecutionインターフェイスのメソッドを使用します。
  </para>

  <itemizedlist>
    <listitem><literal>Object getVariable(String key);</literal></listitem>
    <listitem><literal>void setVariables(Map&lt;String, ?&gt; variables);</literal></listitem>
    <listitem><literal>boolean hasVariable(String key);</literal></listitem>
    <listitem><literal>boolean removeVariable(String key);</literal></listitem>
    <listitem><literal>void removeVariables();</literal></listitem>
    <listitem><literal>boolean hasVariables();</literal></listitem>
    <listitem><literal>Set&lt;String&gt; getVariableKeys();</literal></listitem>
    <listitem><literal>Map&lt;String, Object&gt; getVariables();</literal></listitem>
    <listitem><literal>void createVariable(String key, Object value);</literal></listitem>
    <listitem><literal>void createVariable(String key, Object value, String typeName);</literal></listitem>
  </itemizedlist>

  <para>jBPM変数の値が変更されたことを自動的に検知するメカニズムをもっていません。したがって、例えばプロセス変数からserializableなコレクションを
  取得して、要素を追加した場合には、その変更をDBに保存するために、変更後のコレクションを明示的にプロセス変数にセットする必要があります。
  </para>
  
  <section>
    <title>変数のスコープ</title>
    <para>デフォルトでは、変数はトップレベルのプロセスインスタンススコープに生成されます。つまり変数は、プロセスインスタンス全体のすべての実行パスから見え、アクセス可能であるということです。
    また、プロセス変数は動的に生成されます。したがって、変数は、前述のメソッドのうちの一つを通じて値が初めてセットされる時点で生成されます。
    </para>
    <para>個々のexecutionは変数のスコープです。ネストされたexecutionレベルにおいて宣言された変数は、自身の変数を'見る'ことができます。
    そして、親のexecutionで宣言された変数は通常のスコープルールに従います。
    <literal>ActivityExecution</literal>インターフェイス
    や<literal>EventListenerExecution</literal>のようなexecutionインターフェイスのメソッド<literal>createVariable</literal>を使えばexecution-localな変数は削除されます。
    </para>
	  <para>今後のリリースで、jPDLプロセス言語内での変数宣言を追加するかもしれません。
	  </para>
  </section>
  
  <section>
    <title>変数の型</title>
    <para>jBPMは、以下のJavaの型をプロセス変数に使用することができます。</para>
    <itemizedlist>
      <listitem>java.lang.String</listitem>
      <listitem>java.lang.Long</listitem>
      <listitem>java.lang.Double</listitem>
      <listitem>java.util.Date</listitem>
      <listitem>java.lang.Boolean</listitem>
      <listitem>java.lang.Character</listitem>
      <listitem>java.lang.Byte</listitem>
      <listitem>java.lang.Short</listitem>
      <listitem>java.lang.Integer</listitem>
      <listitem>java.lang.Float</listitem>
      <listitem>byte[] (byte array)</listitem>
      <listitem>char[] (char array)</listitem>
      <listitem>hibernate entity with a long id</listitem>
      <listitem>hibernate entity with a string id</listitem>
      <listitem>serializable</listitem>
    </itemizedlist>
    <para>変数を永続化する際には、このリストの順に変数の型をチェックします。 
    最初にマッチした型で、変数を方法を決定します。
    </para>
  </section>
  
</chapter>
