<chapter id="services">
  <title>サービス</title>
  
  <section id="processdefinitionprocessinstanceandexecutions">
    <title>プロセス定義、プロセスインスタンス、エグゼキューション</title>
    <para>プロセス定義とは、処理の個々のステップを記述したものです。
    例えば、ある保険会社について考えてみると、
    その保険会社がローンの要請をどのように取り扱うか、そのステップを記述した、以下のような<literal>ローン</literal> プロセス定義を持っているかもしれません。
    </para> 
    <figure id="loan.process.definition.example">
      <title>ローンプロセス定義の例</title>
      <mediaobject><imageobject><imagedata align="center" fileref="images/loan.process.definition.png"/></imageobject></mediaobject>
    </figure>
    <para>１つのプロセスインスタンスが、プロセス定義の１つの特定の実行状態を表しています。
    例えば、先週の金曜日 John Doe からボートを買うのに融資してくれといったローンの要請があった場合、
    それがローンプロセス定義上の１つのプロセスインスタンスとして表現されます。
    </para>
    <para>プロセスインスタンスは、実行時の状態をすべて保持しています。その中でも最も重要なプロパティは、
    現在のアクティビティを指すポインタです。
    </para>
    <figure id="loan.process.instance.example">
      <title>ローンプロセスインスタンスの例</title>
      <mediaobject><imageobject><imagedata align="center" fileref="images/loan.process.instance.png"/></imageobject></mediaobject>
    </figure>
    <para>送金とアーカイブを平行して実施すると仮定してみましょう。
    プロセスインスタンスは、下図のように、二つの子エグゼキューションを持つでしょう。
    </para>
    <figure id="loan.executions.example">
      <title>ローンエグゼキューションの例</title>
      <mediaobject><imageobject><imagedata align="center" fileref="images/loan.executions.png"/></imageobject></mediaobject>
    </figure>
    <para>より一般的に言うと、プロセスインスタンスは、エグゼキューションツリーのルートです。
    新しいプロセスインスタンスが開始されると、プロセスインスタンスはエグゼキューションスコープのルートになります。
    リーフのエグゼキューションだけがアクティブになり得ます。
    </para>
    <para>なぜこのようなツリー構造と採っているかというと、実行の１つのパスだけがある場合において、構造をシンプルにできるからです。
    サービスAPIのレベルでは、プロセスインスタンスとエグゼキューションを機能的な違いを考える必要がありません。
    したがって、サービスAPIにおいて、
     <literal>プロセスインスタンス</literal> と
    <literal>エグゼキューション</literal> に言及するのに、Execution型だけを持っています。
    </para>
  </section>

  <section id="processengine">
    <title>プロセスエンジン</title>
    <para>jBPMとの対話は、サービスAPIを通して行います。
    サービスのインターフェイスは <literal>Configuration</literal>から生成される、 <literal>ProcessEngine</literal> より取得できます。
    </para>
    <para><literal>ProcessEngine</literal> はスレッドセーフです。ですので、staticなメンバーフィールドに値を保持することができますし、
    JNDIやその他の主要な場所に配置するのがより良いでしょう。
    一つの <literal>ProcessEngine</literal> オブジェクトがアプリケーション上のすべてのリクエストやスレッドを受け付けることができます。
    この節では、<literal>ProcessEngine</literal>の取得方法について説明します。
    </para>
    
    <para>本節やプロセスのデプロイについて説明する次節に登場するコードの断片は、
    <literal>org.jbpm.examples.services.ServicesTest</literal> の例から採ったものです。 
    </para>
    
    <programlisting>ProcessEngine processEngine = new Configuration()
      .buildProcessEngine();</programlisting>
    
    <para>このコードは、クラスパスのルートにあるはずの <literal>jbpm.cfg.xml</literal> というデフォルトの設定ファイルから、 <literal>ProcessEngine</literal>
    インスタンスを作成する方法を示しています。もし、別の場所にある設定ファイルを使用したい場合は、以下のように <literal>setResource</literal> メソッドを使用してください。
    </para>
    
    <programlisting>ProcessEngine processEngine = new Configuration()
      .setResource("my-own-configuration-file.xml")
      .buildProcessEngine();</programlisting>
    
    <para>
    この他にも、<literal>InputStream</literal>や、
    <literal>xmlString</literal>や、 <literal>InputSource</literal>や、 
    <literal>URL</literal> や、 <literal>File</literal>といった、設定内容を細かく指定するための <literal>setXxxx</literal> メソッドが用意されています。
    </para>
  
    <para><literal>ProcessEngine</literal> から、以下のサービスを取得することができます。
    </para>
    
    <programlisting><emphasis role="bold">RepositoryService</emphasis> repositoryService = processEngine.getRepositoryService();
<emphasis role="bold">ExecutionService</emphasis> executionService = processEngine.getExecutionService();
<emphasis role="bold">TaskService</emphasis> taskService = processEngine.getTaskService();
<emphasis role="bold">HistoryService</emphasis> historyService = processEngine.getHistoryService();
<emphasis role="bold">ManagementService</emphasis> managementService = processEngine.getManagementService();</programlisting>

    <para>上記の方法の他にも、設定ファイル内で定義されているオブジェクトは、型を指定したり(<literal>processEngine.get(Class&lt;T&gt;)</literal>) 、
    名前を指定することで (<literal>processEngine.get(String)</literal>)取得することができます。</para>

  </section>

  <section id="deployingaprocess">
    <title>プロセスをデプロイする</title>
    <para><literal>RepositoryService</literal> 配置（デプロイ）を管理するメソッドをまとめたものです。
    最初の例は、 <literal>RepositoryService</literal> を使用して、クラスパス上のプロセスリソースをデプロイする例です。
    </para>
    <programlisting>String deploymentId = repositoryService.createDeployment()
    .addResourceFromClasspath("org/jbpm/examples/services/Order.jpdl.xml")
    .deploy();</programlisting>
    <para>前述の <literal>addResourceFromClasspath</literal> メソッドとよく似たメソッドで、
    file、url、string、input stream、zip input streamからプロセス定義XMLを読み込むことができます。
    </para>
    <para>個々のデプロイは、名前付きリソースの集合です。個々のリソースの内容はバイト配列です。
    jPDLプロセスファイルは、<literal>.jpdl.xml</literal> という拡張子によって認識されます。
    その他のリソースの型は、taskフォームやjavaのクラスです。
    </para>
    <para>デプロイは、複数の名前付きリソースのまとまりに対して行われるため、複数のプロセス定義や、複数の型を含み得ます。
    jPDLデプロイヤは、<literal>.jpdl.xml</literal> という拡張子を自動的に認識します。
    </para>
    <para>デプロイ時に、プロセス定義毎に <literal>id</literal> が割り当てられます。
    <literal>id</literal> は、キーとバージョンをダッシュでつないだ<literal>{key}-{version}</literal> というフォーマットです。
    </para>
    <para><literal>key</literal> が与えられていない場合は、nameを元にした値が、キーとして自動的に生成されます。
    その際、nameに使用されているアルファベットと数字以外の文字はすべてアンダースコアに置き換えられて、キーの値となります。
    </para>
    <para>同じ <literal>name</literal> だけが一つの
    <literal>key</literal> に関連づけられますし、逆もまたしかりです。
    </para>
    <para><literal>version</literal> が与えられていない場合は、<literal>version</literal> 
    が自動的に割り当てられます。バージョンを割り当てるために、同名のすべてのデプロイ済みの定義ファイルのバージョンが
    考慮に入れられます。新たに割り当てられる <literal>version</literal> は、既存の同じ<literal>key</literal>のプロセス定義のうち、
    最も大きな <literal>version</literal> 番号よりも一つ大きな値になります。
    もし、同じ <literal>key</literal> のプロセス定義が一つもデプロイされていない場合は、バージョン番号は1になります。
    </para>
    <para>最初二示すのは、nameだけを定義している例です。</para>
    <programlisting>&lt;process name=&quot;Insurance claim&quot;&gt;
...
&lt;/process&gt;</programlisting>
    <para>このプロセスを初めてデプロイするとしましょう。その場合、以下のプロパティを取得することができます。
    </para>
    <table><title>key無しの場合のプロセスプロパティ</title>
      <tgroup cols="3" rowsep="1" colsep="1">
        <thead>
          <row>
            <entry>プロパティ</entry>
            <entry>値</entry>
            <entry>取得元</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>name</literal></entry>
            <entry>Insurance claim</entry>
            <entry>プロセス xml</entry>
          </row>
          <row>
            <entry><literal>key</literal></entry>
            <entry>Insurance_claim</entry>
            <entry>自動生成</entry>
          </row>
          <row>
            <entry><literal>version</literal></entry>
            <entry>1</entry>
            <entry>自動生成</entry>
          </row>
          <row>
            <entry><literal>id</literal></entry>
            <entry>Insurance_claim-1</entry>
            <entry>自動生成</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>次に示すのが、キーを定義することによって先ほどよりも短いidを取得できるという例です。</para>
    <programlisting>&lt;process name=&quot;Insurance claim&quot; key=&quot;ICL&quot;&gt;
...
&lt;/process&gt;</programlisting>
    <para>この場合、プロセス定義のプロパティは以下のようになります。</para>
    <table><title>keyありの場合のプロセスプロパティ</title>
      <tgroup cols="2" rowsep="1" colsep="1">
        <thead>
          <row>
            <entry>プロパティ</entry>
            <entry>値</entry>
            <entry>取得元</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>name</literal></entry>
            <entry>Insurance claim</entry>
            <entry>プロセスxml</entry>
          </row>
          <row>
            <entry><literal>key</literal></entry>
            <entry>ICL</entry>
            <entry>プロセスxml</entry>
          </row>
          <row>
            <entry><literal>version</literal></entry>
            <entry>1</entry>
            <entry>自動生成</entry>
          </row>
          <row>
            <entry><literal>id</literal></entry>
            <entry>ICL-1</entry>
            <entry>自動生成</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  
<!-- 
  <section id="undeployingdeployments">
    <title>Undeploying deployments</title>
    <para>TODO</para>
  </section>
-->

  <section id="deletingadeployment">
    <title>デプロイしたものを削除するには</title>
    <para>デプロイを削除すると、デプロイしたものがデータベースから取り除かれます。</para>
    <programlisting>repositoryService.deleteDeployment(deploymentId);</programlisting>
    <para>このメソッドを使用する際、デプロイに含まれるプロセス定義ファイルについて、アクティブなプロセス実行が残っている場合は、例外をスローします。
    </para>
    <para>削除するプロセス定義にひもづく、すべてのプロセスインスタンスのデプロイを連鎖的に削除したい場合は、
    <literal>deleteDeploymentCascade</literal> メソッドを使用してください。
    </para>
  </section>

  <section id="startinganewprocessinstance">
    <title>新しいプロセスインスタンスを開始するには</title>
    
    <section id="inlatest">
      <title>最新のバージョンのプロセスを使用する</title>
      <para>プロセス定義に対して、新しいプロセスインスタンスを開始するのに、単純で最もよくやる方法は以下の方法です。
      </para>
      <programlisting>ProcessInstance processInstance = executionService.startProcessInstanceByKey(&quot;ICL&quot;);</programlisting>
      <para>この場合、サービスメソッドは最初にキー名が <literal>ICL</literal> の内で、最新のバージョンを検索します。.  Then a new 
      そして、新しく生成されたプロセスインスタンスは、その最新のプロセス定義に対して開始されます。
      </para>
      <para>例示している保険金請求プロセスの新しいバージョンがデプロイされると、
      <literal>startProcessInstanceByKey</literal> のすべての実行は、自動的に新しくデプロイされたバージョンに切り替わります。
      </para>
    </section>

    <section id="specificprocessversion">
      <title>特定のバージョンのプロセスを使用する</title>
      <para>代わりに特定のバージョンのプロセス定義に対して、新しいプロセスインスタンスを開始したい場合、
      以下のようにプロセス定義のIDを使用することができます。
      </para>
      <programlisting>ProcessInstance processInstance = 
    executionService.startProcessInstanceById(&quot;ICL-1&quot;);</programlisting>
    </section>

    <section id="withakey">
      <title>With a key</title>
      <para>A new process instance can optionally be given a key.  This key is 
      a user defined reference to the execution and is sometimes referred to as
      the 'business key'.  A business key must be unique within the 
      scope of all versions of a process definition. Typically it is easy 
      to find such a key in the domain of the business process. For example, an 
      order id or an insurance claim number.
      </para>
      <programlisting>ProcessInstance processInstance = 
    executionService.startProcessInstanceByKey(&quot;ICL&quot;, &quot;CL92837&quot;);</programlisting>
      <para>The key is used to create the id of the process instance.  
      The format used is <literal>{process-key}.{execution-id}</literal>.  
      With a dot between process-key and execution-id. 
      So execution created in the previous code snippet will have id 
      <literal>ICL.CL92837</literal>.
      </para>  
      <para>If no user defined key is provided, the DB primary key is taken
      as the key.  In that case, the id can be retrieved like this:   
      <programlisting>ProcessInstance processInstance = 
    executionService.startProcessInstanceByKey(&quot;ICL&quot;);
String pid = processInstance.getId();</programlisting>
      </para> 
      <para>It is a best practice to use a user defined business key. Typically in your application 
      domain, finding such a key is not difficult. By providing a user defined key, you can 
      then compose the id of the execution, rather then performing a query based 
      on the process variables - which is also more costly performance-wise.
      </para>
    </section>
    
    <section id="withvariables">
      <title>With variables</title>
      <para>A map of named parameter objects can be provided when starting a 
      new process instance.  These parameters will be set as variables on the process 
      instance between creation and start of the process instance.
      </para>
      <programlisting>Map&lt;String,Object&gt; variables = new HashMap&lt;String,Object&gt;();
variables.put(&quot;customer&quot;, &quot;John Doe&quot;);
variables.put(&quot;type&quot;, &quot;Accident&quot;);
variables.put(&quot;amount&quot;, new Float(763.74));

ProcessInstance processInstance = 
    executionService.startProcessInstanceByKey(&quot;ICL&quot;, variables);</programlisting>
    </section>
  </section>

  <section id="singallingawaitingexecution">
    <title>Signalling a waiting execution</title>
    <para>When using a <literal>state</literal> activity, the execution (or process instance) 
    will halt when it arrives in a state, waiting for a signal (aka external trigger).  
    The method <literal>signalExecution</literal> and alike can be used for that.  Executions are 
    referenced by an execution id (String).
    </para>
    <para>In some cases, the execution that arrives in a state will be the process instance 
    itself.  But that is not always the case.  In case of timers or concurrency, a process 
    is the root execution of a tree of executions.  So you have to make sure that you signal
    the right path of execution.
    </para>
    <para>The preferred way to capture the right execution is by associating an event listener to 
    the state activity like this:
    </para>
    <programlisting>&lt;state name=&quot;wait&quot;&gt;
  &lt;on event=&quot;start&quot;&gt;
    &lt;event-listener class=&quot;org.jbpm.examples.StartExternalWork&quot; /&gt;
  &lt;/on&gt;
  ...
&lt;/state&gt;</programlisting>
    <para>In event listener <literal>StartExternalWork</literal> you can kick off what needs to
    be done externally.  In that event listener you can also obtain the exact execution id
    with <literal>execution.getId()</literal>.  It's that executionId that you'll need to provide 
    with the signal later on when the external work is done:
    </para>
    <programlisting>executionService.signalExecutionById(executionId);</programlisting>
    <para>There is an alternatively (less preferrable) way to obtain the executionId 
    when the execution arrives in the <literal>state</literal> activity.  
    It's only possible to obtain the execution id this way if you know after which jBPM 
    API call the execution will have entered the <literal>state</literal> activity:
    </para>
    <programlisting>// assume that we know that after the next call
// the process instance will arrive in <literal>state</literal> external work

ProcessInstance processInstance = 
  executionService.startProcessInstanceById(processDefinitionId);
// or ProcessInstance processInstance = 
//  executionService.signalProcessInstanceById(executionId);

Execution execution = processInstance.findActiveExecutionIn("external work");
String executionId = execution.getId();</programlisting>
  </section>
  
  <para>
  Do note that the above solution couples the application logic (too) closely
  by using knowledge about the actual process structure.
  </para>

  <section id="taskservice">
    <title>TaskService</title>
    <para>The primary purpose of the TaskService is to provide access to 
    task lists.  The code sample will show how to get the task list for 
    the user with id <literal>johndoe</literal>.  
    </para>
    <programlisting>List&lt;Task&gt; taskList = taskService.findPersonalTasks(&quot;johndoe&quot;);</programlisting>
    <para>Typically tasks are associated with a form and displayed in some user 
    interface.  The form needs to be able to read and write data related to the task.   
    </para>
    <programlisting>long taskId = task.getId();

Set&lt;String&gt; variableNames = taskService.getVariableNames(taskId);
variables = taskService.getVariables(taskId, variableNames);

variables = new HashMap&lt;String, Object&gt;();
variables.put(&quot;category&quot;, &quot;small&quot;);
variables.put(&quot;lires&quot;, 923874893);
taskService.setVariables(taskId, variables);</programlisting>
    <para>and complete tasks</para>
    <programlisting>taskService.completeTask(taskId);</programlisting>
    <para>Tasks can also be offered to a set of candidates.  Candidates can be 
    users or groups.  Users can take tasks for which they are a candidate.  Taking 
    a task means that this user will be set as the assignee.  After that, other users 
    will be blocked from taking the task.
    </para>
    <para>People should not work on 
    a task unless they are assigned to that task.  The user interface should display 
    forms and allow users to complete tasks if they are assigned to it.
    For unassigned tasks for which the user is a candidate, the only action that 
    should be exposed is 'take'.      
    </para>
    <para>More on tasks in <xref linkend="task" /> </para>
  </section>

  <section id="historyservice">
    <title>HistoryService</title>
    <para>During runtime execution of process instances, events are generated.  And from 
    those events, history information on both running and completed process executions are 
    collected in the history tables.  The <literal>HistoryService</literal> provides 
    access to that information. 
    </para>
    <para>Querying for all process instances for a specific process definition can be 
    done like this:</para>
    <programlisting>List&lt;HistoryProcessInstance&gt; historyProcessInstances = historyService
  .createHistoryProcessInstanceQuery()
  .processDefinitionId(&quot;ICL-1&quot;)
  .orderAsc(HistoryProcessInstanceQuery.PROPERTY_STARTTIME)
  .list();</programlisting>
    <para>Also individual activity executions are stored in the history information as 
    <literal>HistoryActivityInstance</literal>s.
    </para>
    <programlisting>List&lt;HistoryActivityInstance&gt; histActInsts = historyService
    .createHistoryActivityInstanceQuery()
    .processDefinitionId(&quot;ICL-1&quot;)
    .activityName(&quot;a&quot;)
    .list();</programlisting>
    <para>Convenience methods <literal>avgDurationPerActivity</literal> and 
    <literal>choiceDistribution</literal> are also available.  See javadocs for more 
    information on those methods.
    </para>
  </section>

  <section id="managementservice">
    <title>ManagementService</title>
    <para>The management service is mostly used to manage the jobs.  See javadocs for 
    more information.  This functionality is also exposed through the jBPM web console.
    </para>
  </section>

  <section id="queryApi">
    <title>Query API</title>
    <para>
    Starting from jBPM 4.0, a new API has been introuced with a query system that 
    covers most of the queries you can think of. Developers who need to write company-specific
    queries can of course still rely on Hibernate. But for most use cases,
    the query API will be more then suffice. 
    Queries can be written in a unified way on all major jBPM concepts: 
    Process Instances, Tasks, Deployments, Historical processes, etc.
    </para>
    <para>
    For example:
    <programlisting>
List&lt;ProcessInstance&gt; results = executionService.createProcessInstanceQuery()
                                       .processDefinitionId(&quot;my_process_definition&quot;)
                                       .notSuspended()
                                       .page(0, 50)
                                       .list();
    </programlisting>
    This example returns all the process instances of the given process definition
    which are not suspended. The result is also paged, and the first page of 50
    results is given. 
    </para><para>Querying tasks is done in completely the same way:
    <programlisting>
List&lt;Task&gt; myTasks = taskService.createTaskQuery()
    .processInstanceId(piId)
    .assignee(&quot;John&quot;)
    .page(100, 120)
    .orderDesc(TaskQuery.PROPERTY_DUEDATE)
    .list();
</programlisting>
This query will give all the tasks for a given process instance assigned to John, 
paged of course, in a descending order based on the duedate. 
    </para>
    <para>
    Every service has operations of creating such unified queries (eg. querying
    jobs through the <literal>ManagementService</literal>, querying completed
    process instances through the <literal>HistoryService</literal>. Do check
    the Javadoc of the services to learn everything about the query API.
    </para>
  </section>

</chapter>
