<chapter id="installation">
  <title>インストール</title>
  
  <section id="thedistribution">
    <title>ディストリビューション</title>
    <para>ダウンロードしたjBPM (<literal>jbpm-4.X.zip</literal>) を任意の場所にunzipしてください。
    すると、以下のサブディレクトリが展開されます。
    </para>
    <itemizedlist>
      <listitem><literal>doc</literal>: ユーザガイド、javadocファイル、ディベロッパーガイド</listitem>
      <listitem><literal>examples</literal>: このユーザガイドで使用している例</listitem>
      <listitem><literal>install</literal>: 環境ごとのインストールスクリプト</listitem>
      <listitem><literal>lib</literal>: サードパーティのライブラリと特別なjBPM向けライブラリ</listitem>
      <listitem><literal>src</literal>: ソースコードファイル</listitem>
      <listitem><literal>migration</literal>: ディベロッパーガイドを参照してください</listitem>
      <listitem><literal>jbpm.jar</literal>: jBPMの本体</listitem>
    </itemizedlist>
  </section>

  <section>
    <title>必要なソフトウェア</title>
    <para>jBPMは、JDK (standard java) version 5以上が必要です。
    </para>
    <ulink url="http://java.sun.com/javase/downloads/index.jsp">http://java.sun.com/javase/downloads/index.jsp</ulink>
    <para>antスクリプトを実行するのに、apache ant version <emphasis role="bold">1.7.0</emphasis>以上が必要です。
    </para>
    <ulink url="http://ant.apache.org/bindownload.cgi">http://ant.apache.org/bindownload.cgi</ulink>
  </section>

  <section id="gettingstartedquickly">
    <title>さっそく始めてみよう</title>
    <para>手っ取り早くjBPMを始めるには、<emphasis role="bold">demo setup</emphasis>がよいでしょう。
    この章では、demo setupの手順を説明します。
    </para>
    <para>すでに<literal>jboss-5.0.0.GA.zip</literal>をダウンロード済みなら、それを 
    <literal>${jbpm.home}/install/downloads</literal>ディレクトリに置いてください。
    ダウンロード済みでなければ、後述するスクリプトがダウンロードしてくれます。ダウンロードの分だけ時間を食いますが（ネットワーク環境次第）。
    同じことが、eclipse-jee-galileo-win32.zip (Linuxなら eclipse-jee-galileo-linux-gtk(-x86_64).tar.gz
    Mac OSXならeclipse-jee-galileo-macosx-carbon.tar.gz)についても言えます。
    </para>
    <para>コマンドプロンプトを開き、<literal>${jbpm.home}/install</literal>ディレクトリに移動します。そして、以下のコマンドを実行します。
    </para>
    <programlisting>ant demo.setup.jboss</programlisting>
    <para>もしくは</para>
    <programlisting>ant demo.setup.tomcat</programlisting>
    <para>すると、以下の処理が実行されます。</para>
    <itemizedlist>
      <listitem>JBoss<literal>${jbpm.home}/jboss-5.0.0.GA</literal>ディレクトリにインストールします。</listitem>
      <listitem>先ほどのJBossにjBPMをインストールします。</listitem>
      <listitem>hsqldbをインストールして、バックグラウンドで起動します。</listitem>
      <listitem>jBPMの動作に必要なDBスキーマを作成します。</listitem>
      <listitem>バックグラウンドでJBossを起動します。</listitem>
      <listitem>examplesディレクトリからexamples.barというファイル名のビジネスアーカイブを作成し、先ほど作成したjBPM用のDBにデプロイします。</listitem>
      <listitem><literal>${jbpm.home}/install/src/demo/example.identities.sql</literal>を実行して、example用のユーザとグループをロードします。</listitem>
      <listitem>Eclipseを<literal>${jbpm.home}/eclipse</literal>フォルダにインストールします。</listitem>
      <listitem>jBPM web consoleをインストールします。</listitem>
      <listitem>Signavio web modelerをインストールします。</listitem>
      <listitem>eclipseを起動します。</listitem>
    </itemizedlist>
    <para>
      コマンド実行後は、JBoss (またはTomcat、実行したdemo.setupスクリプトに依ります)がバックグラウンドで実行されます。 
      eclipseが起動したら、<xref linkend="graphicalprocessdesigner" />を参照しながら、jBPMビジネスプロセスを書いてみましょう。
    </para>
    <para>
      もしくは<ulink url="http://localhost:8080/jbpmeditor/p/explorer">the Signavio web editor</ulink>を使って、プロセスのモデリングを始めてもかまいません。
    </para>
    <para>または、<ulink url="http://localhost:8080/jbpm-console">the jBPM console</ulink>を眺めてみるのもよいでしょう。
    jBPM consoleには、以下のユーザをどれかを使えばログインできます。
    </para>
    <table><title>お試し用のユーザ:</title>
      <tgroup cols="2" rowsep="1" colsep="1">
        <thead>
          <row>
            <entry>ユーザ名</entry>
            <entry>パスワード</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>alex</entry>
            <entry>password</entry>
          </row>
          <row>
            <entry>mike</entry>
            <entry>password</entry>
          </row>
          <row>
            <entry>peter</entry>
            <entry>password</entry>
          </row>
          <row>
            <entry>mary</entry>
            <entry>password</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>
    <emphasis role="bold">console の既知の制限事項</emphasis>:
    今のところ、遅いマシンでレポートを初期化すると、タイムアウトしやすいです。
    したがって、初めてレポートにアクセスする際は、リクエストがタイムアウトして
    コンソールが異常終了してしまうでしょう。
    一旦ログアウトしてからログインし直せば、この問題を回避できます。
    この問題は、<ulink url="https://jira.jboss.org/jira/browse/JBPM-2508">JBPM-2508</ulink>に報告されています。
  </para>
  </section>

  <section id="installscripts">
    <title>インストールスクリプト</title>
	  <para>jBPMの<literal>install</literal>ディレクトリに、
	  antの<link>build.xml</link>が含まれています。これを使って、jBPMをご自身のアプリケーション環境にインストール
	  することができます。
	  </para>
	     
	  <para>インストールスクリプトがそうしているように、jBPMのインストール後の状態と設定ファイルを直接編集すべきではありません。
	  jBPMの設定ファイルを直接編集することも可能ですが、サポート対象外です。
	  </para> 
	
    <para>
    インストールスクリプトを実行するには、コマンドラインを開いて 
    <literal>${jbpm.home}/install</literal>ディレクトリに移動してください。<literal>ant -p</literal>で、スクリプトでできることを調べる
    ことができます。手っ取り早く実行できるよう、各スクリプトはデフォルト値がセットされた状態でパラメータ化されています。
    以下の一覧は、利用可能なスクリプトの概要です。
    </para>  
    <para>
      <itemizedlist>
      <listitem> 
        <literal>demo.setup.jboss</literal>: jbossのインストール、jbpmをjbossにインストール、
        jbossを起動、jBPM用のDBスキーマを作成、examplesをデプロイ、お試し用ユーザ情報をロードする、
        eclipseをインストールして起動
      </listitem>
      <listitem>   
        <literal>demo.setup.tomcat</literal>: tomcatのインストール、jbpmをtomcatにインストール、
        tomcatを起動、jBPM用のDBスキーマを作成、examplesをデプロイ、お試し用ユーザ情報をロードする、
        eclipseをインストールして起動
      </listitem>
      <listitem>
        <literal>clean.cfg.dir</literal>: <literal>${jbpm.home}/install/generated/cfg</literal>フォルダを削除する。
      </listitem>
      <listitem>
        <literal>create.cfg</literal>: <literal>${jbpm.home}/install/generated/cfg</literal>フォルダに現在のパラメータをもとに設定ファイルを作成する。 
      </listitem>
      <listitem>
        <literal>create.jbpm.schema</literal>: データベースにjbpm用のテーブルを作成する。
      </listitem>
      <listitem>   
        <literal>create.user.webapp</literal>: <literal>${jbpm.home}/install/generated/user-webapp</literal>ディレクトリに基本的なwebアプリケーション構成を生成する。
      </listitem>
      <listitem>
        <literal>delete.jboss</literal>: インストールしたJBossを削除する。
      </listitem>
      <listitem>   
        <literal>delete.tomcat</literal>: インストールしたTomcatを削除する。
      </listitem>
      <listitem>   
        <literal>demo.teardown.jboss</literal>: jbpm用のDBスキーマをdropし、jbossを停止する。
      </listitem>
      <listitem>   
        <literal>demo.teardown.tomcat</literal>: tomcatを停止し、（必要なら）hsqldbサーバも停止する。
      </listitem>
      <listitem>   
        <literal>drop.jbpm.schema</literal>: データベースからjbpm用のテーブルをdropする。
      </listitem>
      <listitem>  
        <literal>get.eclipse</literal>: まだ無ければ、eclipseをダウンロードする。
      </listitem>
      <listitem>  
        <literal>get.jboss</literal>: まだ無ければ、現在のjBPMのバージョンに対応したJBoss ASをダウンロードする。
      </listitem>
      <listitem> 
        <literal>get.tomcat</literal>: まだ無ければ、現在のjBPMのバージョンに対応したtomcatをダウンロードする。
      </listitem>
      <listitem> 
        <literal>hsqldb.databasemanager</literal>: hsqldb database managerを起動する
      </listitem>
      <listitem>
        <literal>install.eclipse</literal>:  まだ無ければ、eclipseをダウンロードしてunzipする。
      </listitem>
      <listitem>  
        <literal>install.jboss</literal>: まだ無ければ、JBossをダウンロードしてunzipする。
      </listitem>
      <listitem>  
        <literal>install.jbpm.into.jboss</literal>: jBPMをJBossにインストールする
      </listitem>
      <listitem>  
        <literal>install.tomcat</literal>: まだ無ければ、tomcatを${tomcat.distro.dir}にダウンロードしてunzipする。
      </listitem>
      <listitem>   
        <literal>install.jbpm.into.tomcat</literal>: jBPMをtomcatにインストールする
      </listitem>
      <listitem>   
        <literal>install.examples.into.tomcat</literal>: すべてのexampleプロセスをデプロイします。
      </listitem>
      <listitem>
        <literal>install.signavio.into.jboss</literal>: signavioをjbossにインストールします。
      </listitem>
      <listitem> 
        <literal>install.signavio.into.tomcat</literal>: signavioをtomcatにインストールします。
     </listitem>
      <listitem>   
        <literal>load.example.identities</literal>: example用のユーザとグループをデータベースにロードします。
      </listitem>
      <listitem>  
        <literal>reinstall.jboss</literal>: 以前インストールしたjbossを削除してから、インストールし直します。
      </listitem>
      <listitem>   
        <literal>reinstall.jboss.and.jbpm</literal>: 以前インストールしたjbossを削除してから、インストールし直した上で、jbpmをインストールします。
      </listitem>
      <listitem>   
        <literal>reinstall.tomcat</literal>: 以前インストールしたtomcatを削除してから、インストールし直します。
      </listitem>
      <listitem>  
        <literal>reinstall.tomcat.and.jbpm</literal>: 以前インストールしたtomcatを削除してから、インストールし直した上で、jbpmをインストールします。
      </listitem>
      <listitem>   
        <literal>start.eclipse</literal>: eclipseを起動します。
      </listitem>
      <listitem>  
        <literal>start.jboss</literal>: jbossを起動し、起動が完了するまで待機した上で、バックグラウンドで実行させます。
      </listitem>
      <listitem>   
        <literal>start.tomcat</literal>: Tomcatを起動し、起動が完了するまで待機した上で、バックグラウンドで実行させます。
      </listitem>
      <listitem>  
        <literal>stop.jboss</literal>: jbossを停止を指示します。が、停止を待たずに処理を終了します。
      </listitem>
      <listitem>   
        <literal>stop.tomcat</literal>: Tomcatを停止を指示します。が、停止を待たずに処理を終了します。
      </listitem>
      <listitem>   
        <literal>upgrade.jbpm.schema</literal>:  データベース上のjBPM用のテーブルを現在のバージョン向けにアップグレードします。
      </listitem>
      </itemizedlist>
    </para>
    <para>To specify your jdbc properties that are used in the scripts above (eg.DB schema generation), 
    the easiest is to update the appropriate properties file in directory <literal>${jbpm.home}/install/jdbc</literal>.  
    The appropriate properties file will be loaded by the scripts that are DB related. 
    </para>
    <para>Also following properties are customizeable</para>
    <itemizedlist>
      <listitem><literal>database</literal> : デフォルト値は <literal>hsqldb</literal> です。他に、
       <literal>mysql</literal>、 <literal>oracle</literal>、 <literal>postgresql</literal>が利用可能です。</listitem>
      <listitem><literal>jboss.version</literal> : デフォルト値は <literal>5.0.0.GA</literal> です。他に、
       <literal>5.1.0.GA</literal> が利用可能です。</listitem>
    </itemizedlist>
    <para>これらのプロパティの値をカスタマイズしたければ、以下のように <literal>-D</literal> オプションを使用してください。
    </para>
    <programlisting>ant -Ddatabase=postgresql demo.setup.jboss</programlisting>
    <para>もしくは、
    <literal>${user.home}/.jbpm4/build.properties</literal> を編集してもかまいません。 
    </para>
  </section>

  <section id="librarydependenciesandconfigurationfiles">
    <title>依存ライブラリと設定ファイル</title>
    <para>わたしたちは、antスクリプトによるjBPMのインストールサポートを提供しています。
    これらのスクリプトを使えば、適切なライブラリと設定ファイルを適切な場所に設置します。
    antスクリプトを使わずに、ご自身でjBPMをあなたのアプリケーションにインストールしたい場合は、
    ディベロッパーズガイドを参照してください。
    </para>
  </section>

  <section id="jboss">
    <title>JBoss</title>
    <para>The target <literal>install.jbpm.into.jboss</literal> will install jBPM into
    your JBoss 5 installation.  Navigate to the install directory and run <literal>ant -p</literal>
    for more details.  This install script will install jBPM as a JBoss-wide service so 
    that all applications can use the same jBPM ProcessEngine. 
    </para>
    <para>Specify property <literal>-Djboss.home=PathToYourJBossInstallation</literal> 
    to customize the path to your JBoss installation.
    </para>
    <para>In JBoss, the <literal>ProcessEngine</literal> can be obtained from JNDI 
    with <literal>new InitialContext().lookup(&quot;java:/ProcessEngine&quot;)</literal>.
    The same ProcessEngine can be obtained with <literal>Configuration.getProcessEngine()</literal>
    </para>
  </section>

  <section id="tomcat">
    <title>Tomcat</title>
    <para><literal>install.jbpm.into.tomcat</literal>ターゲットを使用すれば、jBPMをtomcatにインストールできます。
    </para>
  </section>

  <section id="signavio">
    <title>Signavio webベースプロセスエディタ</title>
    <para><literal>install.signavio.into.jboss</literal> ターゲットや
    <literal>install.signavio.into.tomcat</literal> ターゲットを使用すれば、JBossやTomcatにSignavio webベースプロセスエディタ をインストールすることができます。
    </para>
  </section>

  <section id="userwebapp">
    <title>自分のwebアプリケーションに組み込むには</title>
    <para>If you want to deploy jBPM as a part of your web application, use the
    install target <literal>create.user.webapp</literal>.  That will 
    create a web application with jBPM in it, in the location <literal>${jbpm.home}/install/generated/user-webapp</literal>.  
    </para>
    <para>In case you deploy your app on JBoss or another appserver that has the 
    jta.jar classes, then you need to delete the <literal>${jbpm.home}/install/generated/user-webapp/WEB-INF/lib/jta.jar</literal> 
    </para>
  </section>

  <section id="database">
    <title>データベース</title>
    <para>The install script is also capable of performing database operations
    such as creating the schema, if you are installing jBPM for the first time,
    or upgrading the database used with a previous version to the current schema.
    Dropping the schema is an option as well.
    </para>
    <para>The prerrequisite for any database operation is to specify your
    database connection parameters in <literal>${jbpm.home}/install/jdbc</literal>.
    </para>

    <section id="createdropdb">
      <title>データベーススキーマを生成、削除するには</title>
      <para>To create the schema, run target <literal>create.jbpm.schema</literal>
      in the <literal>${jbpm.home}/install</literal> directory. Apart from
      creating tables and constraints, the mentioned target will initialize
      table <literal>JBPM4_PROPERTY</literal> with the current engine version
      (key <literal>db.version</literal>) and the ID generator base value
      (key <literal>next.dbid</literal>).</para>
      <para>To drop the schema, simply run target <literal>drop.jbpm.schema</literal>.
      Be aware that this operation will destroy any data present in the jBPM
      tables.</para>
    </section>

    <section id="upgradedb">
      <title>既存のデータベースをアップグレードするには</title>
      <para>To upgrade, run target <literal>upgrade.jbpm.schema</literal>
      in the <literal>${jbpm.home}/install</literal> directory.</para>
      <para>Upgrading is a two-fold operation. The foremost step is to add
      any extra tables, columns or constraints that were introduced in newer
      versions. Afterwards, seed data is inserted.</para>
      <para>Between 4.0 and 4.1, table <literal>JBPM4_VARIABLE</literal> got
      a new column <literal>CLASSNAME_</literal> used to support setting
      process variables to values of custom types mapped with Hibernate.
      This column is nullable and left uninitialized since the feature was
      not operational in 4.0.</para>
      <para>From 4.1 to 4.2 the upgrade procedure got more interesting.</para>
      <itemizedlist>
        <listitem>A new table <literal>JBPM4_PROPERTY</literal>
        was introduced for storing engine-wide values.</listitem>
        <listitem>The jBPM version is saved in table <literal>JBPM4_PROPERTY</literal>
        under key <literal>db.version</literal> to allow for precise
        identification in future releases.</listitem>
        <listitem>The ID generation strategy is consistent across databases.
        The next available ID is calculated by querying all tables having
        an identifier column, and stored under key <literal>next.dbid</literal>
        in the <literal>JBPM4_PROPERTY</literal> table.</listitem>
        <listitem>The process language is set to <literal>jpdl-4.0</literal>
        for all existing process definitions under key <literal>langid</literal>
        in table <literal>JBPM4_DEPLOYPROP</literal>. The jPDL parser employs the
        <literal>langid</literal> property to read process documents in a
        backwards-compatible manner.</listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="graphicalprocessdesigner">
    <title>グラフィカルプロセスデザイナ (GPD)</title>
    <para>Eclipse は、jPDLファイルのグラフィカルプロセスデザイナを提供するプラットフォームとして使用されます。
    本節では、Eclipseの取得方法とインストール方法および、GPDプラグインのインストール方法について説明します。
    </para>
    <section>
      <title>Eclipseを取得する</title>
      <para>Eclipse 3.5.0が必要です。
      </para>
      <para><link linkend="gettingstartedquickly">demo setup</link>ターゲットを使用するか、以下のURLからご自身でダウンロードするかして、Eclipseを取得してください。
      <ulink url="http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/galileo">Eclipse IDE for Java EE Developers (163 MB)</ulink>.
      </para>
      <para>Eclipseのclassicバージョンは、XMLエディタが付属していないため、機能が充分ではありません。 
      Eclipse for Java developers も同様です。
      </para>
    </section>
    <section>
      <title>GPD プラグインをEclipseにインストールする</title>
      <para>GPDのインストールには、Eclipseのソフトウェアアップデート機能を使用するのがよいでしょう。
      jBPMのインストール先の <literal>install/src/gpd/jbpm-gpd-site.zip</literal> に、アーカイブされたアップデートサイトがあります。 
      </para>
      <para>Eclipseにアップデートサイトを追加するには
      </para>
      <itemizedlist>
        <listitem><literal>Help</literal> --> <literal>Install New Software...</literal> を選択する</listitem> 
        <listitem> <literal>Add...</literal> をクリックする</listitem>
        <listitem> <literal>Add Site</literal> ダイアログで、 <literal>Archive...</literal> をクリックする</listitem>
        <listitem><literal>install/src/gpd/jbpm-gpd-site.zip</literal> を選択して、'Open' をクリックする</listitem>
        <listitem><literal>Add Site</literal> ダイアログで <literal>OK</literal> をクリックし、'Install'ダイアログに戻る</listitem>
        <listitem>表示される一覧の中から、 <literal>jPDL 4 GPD Update Site</literal> を選択する</listitem>
        <listitem><literal>Next...</literal> をクリックし、つづいて <literal>Finish</literal>をクリックする</listitem>
        <listitem>ライセンスに同意する</listitem>
        <listitem>再起動を問われたら、Eclipseを再起動する</listitem>
      </itemizedlist>
      <figure id="gpd.install.gpd.site">
        <title>GPDのローカルアーカイブサイトを追加する</title>
        <mediaobject><imageobject><imagedata align="center" fileref="images/gpd.install.gpd.site.png"/></imageobject></mediaobject>
      </figure>
    </section>

    <section>
      <title>jBPMランタイムを設定する</title>
      <itemizedlist>
        <listitem><literal>Window</literal> --> <literal>Preferences</literal>をクリックします。 </listitem>
        <listitem><literal>JBoss jBPM</literal> --> <literal>jBPM 4</literal> --> <literal>Runtime Locations</literal>を選択します。</listitem>
        <listitem><literal>Add...</literal>をクリックします。</listitem>
        <listitem><literal>Add Location</literal>ダイアログで、nameを入力します（例えば<literal>jbpm-4.0</literal>など）。<literal>Search...</literal>をクリックします。</listitem>
        <listitem><literal>Browse For Folder</literal>ダイアログで、jbpmをインストールしたホームディレクトリを選択してから<literal>OK</literal>をクリックします。</listitem>
        <listitem><literal>Add Location</literal>ダイアログで<literal>OK</literal>をクリックします。</listitem>
      </itemizedlist>
      <figure id="gpd.runtime.location">
        <title>jBPMライブラリを定義する</title>
        <mediaobject><imageobject><imagedata align="center" fileref="images/gpd.runtime.location.png"/></imageobject></mediaobject>
      </figure>
    </section>

    <section id="definejbpmuserlibraries">
      <title>jBPMユーザライブラリを定義する</title>
      <para>この章では、Eclipseのワークスペース用に、jBPMライブラリと依存ライブラリをユーザライブラリとして
      定義する方法を説明します。
      新規のJavaプロジェクトを作成する際は、このユーザライブラリをビルドパスに含めるとよいでしょう。
      </para>
      <itemizedlist>
        <listitem><literal>Window</literal> --> <literal>Preferences</literal>をクリックします。</listitem>
        <listitem><literal>Java</literal> --> <literal>Build Path</literal> --> <literal>User Libraries</literal>を選択します。</listitem>
        <listitem><literal>New...</literal>をクリックします。</listitem>
        <listitem>name欄に<literal>jBPM Libraries</literal>と入力します。</listitem>
        <listitem><literal>Add JARs...</literal>をクリックします。</listitem>
        <listitem>jBPMのインストール先の'lib'フォルダを指定します。</listitem>
        <listitem>すべてのjarファイルを選択し、<literal>Open</literal>をクリックします。</listitem>
        <listitem><literal>jBPM Libraries</literal>を選択します。</listitem>
        <listitem>もう一度<literal>Add JARs...</literal>をクリックします。</listitem>
        <listitem>jBPMのインストール先直下にある、<literal>jbpm.jar</literal>ファイルを選択します。</listitem>
        <listitem><literal>Open</literal>をクリックします。</listitem>
        <listitem><literal>jbpm.jar</literal>の<literal>Source attachment</literal>を選択します。</listitem>
        <listitem><literal>Edit</literal>をクリックします。</listitem>
        <listitem><literal>Source Attachment Configuration</literal>ダイアログで、<literal>External Folder...</literal>をクリックします。</listitem>
        <listitem>jBPMのインストール先の<literal>src</literal>フォルダを選択します。</listitem>
        <listitem><literal>Choose</literal>をクリックします。</listitem>
        <listitem>開いているすべてのダイアログを閉じるために、<literal>OK</literal>を２回クリックします。</listitem>
      </itemizedlist>
      <figure id="gpd.install.libraries">
        <title>jBPMライブラリを定義する</title>
        <mediaobject><imageobject><imagedata align="center" fileref="images/gpd.install.libraries.png"/></imageobject></mediaobject>
      </figure>
    </section>
    
    <section>
      <title>jPDL 4スキーマをカタログに追加する</title>
      <para>プロセス定義XMLを直接編集するような場合は、あらかじめXMLカタログにスキーマを登録しておけば便利です。そうしておけば、XML編集時にコード補完が使えるようになります。
      </para>
      <itemizedlist>
        <listitem><literal>Window</literal> --> <literal>Preferences</literal>をクリックします。</listitem>
        <listitem><literal>XML</literal> --> <literal>XML Catalog</literal>を選択します。</listitem>
        <listitem>'Add...'をクリックします。</listitem>
        <listitem>'Add XML Catalog Entry'ダイアログを開きます。</listitem>
        <listitem>'Next Catalog'と書かれたアイコンをクリックし、'File System...'を選択します。</listitem>
        <listitem>ダイアログで、jBPMのインストール先の直下にある<literal>jpdl-4.0.xsd</literal>を選択します。 
        </listitem>
        <listitem>'Open'をクリックし、すべてのダイアログを閉じます。</listitem>
      </itemizedlist>
      <figure id="gpd.install.xml.catalog">
        <title>jPDL 4スキーマをカタログに追加する</title>
        <mediaobject><imageobject><imagedata align="center" fileref="images/gpd.install.xml.catalog.png"/></imageobject></mediaobject>
      </figure>
    </section>
    
    <section>
      <title>Examplesをインポートする</title>
      <para>この章では、Eclipseにexamplesプロジェクトをインポートする手順を説明します。
      </para>
      <itemizedlist>
        <listitem><literal>File</literal> --> <literal>Import...</literal>を選択します。</listitem>
        <listitem><literal>General</literal> --> <literal>Existing Projects into Workspace</literal>を選択します。</listitem>
        <listitem><literal>Next</literal>をクリックします。</listitem>
        <listitem><literal>Browse...</literal>をクリックして、ファイル選択ダイアログを表示させます。</listitem>
        <listitem>jBPMをインストールしたルートディレクトリを指定します。</listitem>
        <listitem><literal>OK</literal>をクリックします。</listitem>
        <listitem><literal>examples</literal>プロジェクトが自動的に検索され、選択された状態になっていることを確認します。</listitem>
        <listitem><literal>Finish</literal>をクリックします。</listitem>
      </itemizedlist>
      <para><link linkend="definejbpmuserlibraries">jBPMユーザライブラリ</link>の項に従って設定済みならば、
      examplesに含まれるすべての例がJUnitテストとして実行可能になっています。テストを実行するには、テストクラス上で右クリックして、
      'Run As' --> 'JUnit Test'を選択してください。
      </para>
      <para>これで、いかしたJavaのプロセステクノロジーをがしがし試す準備がすべて整いましたよ！</para>
    </section>

    <section>
      <title>antを使ったデプロイ機能を追加する</title>
      <para>手軽にプロセスをデプロイするには、Eclipseのant機能を使うとよいでしょう。
      ここでは、先ほどのexamplesを使ってやり方を説明します。この方法を参考にして、ご自身のプロジェクトに適用してください。
      最初に、EclipseのAntビューを開いてください。
      </para>
      <itemizedlist>
        <listitem><literal>Window</literal> --> <literal>Show View</literal> --> <literal>Other...</literal> --> <literal>Ant</literal> --> <literal>Ant</literal>を選択します。</listitem>
        <listitem>パッケージエクスプローラより、examplesプロジェクト内の<literal>build.xml</literal>をドラッグして、Antビュー内にドロップしてください。</listitem>
      </itemizedlist>
    </section>

  </section>
</chapter>